---

- name: Ensure all required bridge device attributes are available
  tags: [libvirt_setup, libvirt_bridge, libvirt_networks]
  block:
    - name: Declare required bridge device attributes
      set_fact:
        bridge_name: "{{ libvirt_host_networks[bridge_index].bridge_device }}"
        bridge_device: "{{ libvirt_host_networks[bridge_index].bridge_slave_dev }}"
        net_name: "{{ libvirt_host_networks[bridge_index].name }}"
        net_mode: "{{ libvirt_host_networks[bridge_index].mode }}"
        net_create: "{{ libvirt_host_networks[bridge_index].create }}" 
        interface_type: "{{ libvirt_host_networks[bridge_index].ifcfg_type }}"
        bootproto: "{{ libvirt_host_networks[bridge_index].ifcfg_bootproto }}"
        ipaddress: "{{ libvirt_host_networks[bridge_index].ipaddress }}"
        gateway: "{{ libvirt_host_networks[bridge_index].gateway }}"
        netmask_prefix: "{{ libvirt_host_networks[bridge_index].mask_prefix }}"
        mac_address: "{{ libvirt_host_networks[bridge_index].mac }}"
  rescue:
    - name: Fail when device attribute is missing
      fail:
        msg: |
          This play requires the follow attributes for dictionary libvirt_host_networks
            * bridge_device
            * bridge_slave_dev
            * name
            * mode
            * create
            * ifcfg_type
            * ifcfg_bootproto
            * ipaddress
            * gateway
            * mask_prefix

- name: Configure bridge interface {{ net_name }}
  tags: [libvirt_setup, libvirt_bridge]
  block:
    - name: Ensure no other profiles using {{ bridge_device }} is set to boot
      shell: |
        for name in $(nmcli con show | awk '/{{ bridge_device }}/ {print $1}')
        do 
           echo nmcli con mod $name connection.autoconnect no
        done
       
    - name: Deploy bridge {{ bridge_name }} interface template
      tags: [libvirt_setup, libvirt_bridge]
      template:
        src: templates/ifcfg_bridge_template.j2
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ bridge_name }}
        mode: 0640
    
    - name: Deploy bridge {{ bridge_name }} port {{ bridge_device }} template
      tags: [libvirt_setup, libvirt_bridge]
      template:
        src: templates/ifcfg_device_template.j2
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ bridge_device }}
        mode: 0640
      register: create_slave_device
    
    # Using the systemd module to restart networking seems to not properly panos_restart
    # the networking subsystem, further debugging is required to find root issue.
    # The command module gives us the behaviour we expect which is network restart without loosing
    # connectivity and the bridge interface comes up.
    
    - name: restart network service
      tags: [libvirt_setup, libvirt_bridge]
      command: "systemctl restart {{ item }}"
      args:
        warn: no
      changed_when: false
      loop:
        - NetworkManager
        - libvirtd
    
    - name: Ensure {{ bridge_name }} connection is up 
      tags: [libvirt_setup, libvirt_bridge]
      command: "nmcli connection up {{ bridge_name }}"
      args:
        warn: no
      changed_when: false
    
    #- name: diable old connection
    #  tags: [libvirt_setup, libvirt_bridge]
    #  command: "sudo nmcli connection down {{ bridge_device }}"
    #  args:
    #    warn: no
    #  changed_when: false
    #  when: (("RedHat" and ansible_distribution_major_version == '8')  and (not bridge_name | bool or bridge_name is undefined))
    #  ignore_errors: yes
    
    - name: Ensure libvirt bridge network is defined
      tags: [libvirt_setup, libvirt_bridge, libvirt_networks]
      virt_net:
        name: "{{ net_name }}"
        command: define
        xml: '{{ (lookup("template", "../templates/br_network.xml.j2")) }}'
      when: net_create|bool
    
---
- name: Display all variables/facts known for a host
  debug:
    var: libvirt_host_networks
  register: myresults

- name: Get Architecture
  shell: uname -m
  register: cpu_arch_result

- name: set cpu_arch  
  set_fact:
    cpu_arch: "{{ cpu_arch_result.stdout }}"

- name: validate variables are defined
  include_tasks: verify_variables.yml

- name: validate virtualization extensions are available to this host
  include_tasks: validate.yml
  when: 
    - cpu_arch == 'x86_64' 
    - not cicd_test|bool

- name: validate IBM Power Systems Architecture host
  include_tasks: validate-power.yml
  when: 
    - cpu_arch == 'ppc64le' 
    - not cicd_test|bool

# Example showing how to end the play for specific targets
- name: End the play TESTING
  meta: end_host

- name: configure shell extras
  include_tasks: configure_shell.yml
  when: configure_shell|bool

- name: ensure libvirt packages are installed
  shell: >
    rpm -q "{{ item }}" || yum install -y "{{ item }}" && echo yes
  args:
    warn: false
  loop: "{{ libvirt_pkgs }}"
  register: pkg_installed
  changed_when: pkg_installed.stdout == 'yes'

- name: enable libvirt services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items: "{{ libvirt_services }}"

- name: start tuned profile virtual-host
  shell: |
   set -o pipefail &&  tuned-adm profile virtual-host
  register: start_tuned
  changed_when: start_tuned.rc != 0
  args:
    executable: /bin/bash

- name: configure bridge interface for libvirt
  include_tasks: bridge_interface.yml
  #when: configure_bridge
  loop: "{{ libvirt_host_networks }}"
  loop_control:
    index_var: type_idx
    loop_var: bridge_item
  when: (bridge_item.mode == 'bridge' and  not cicd_test|bool)

- name: configure libvirt network
  loop: "{{ libvirt_host_networks }}"
  loop_control:
    index_var: libvirt_idx
    loop_var: libvirt_item
  include_tasks: networks.yml
  when: not cicd_test|bool

- name: configure libvirt storage pool
  include_tasks: storage_pool.yml
  when: not cicd_test|bool

- name: copy qcow image to machine
  include_tasks: copy_qcow_image.yml
  when: not cicd_test|bool

- name: install cockpit
  package:
    name: "{{ cockpit_packages }}"
    state: present
  ignore_errors: yes

- name: enable cockpit service
  service:
    name: cockpit
    enabled: yes
    state: started

- name: enable firewall ports for cockpit
  firewalld:
    service: cockpit
    permanent: yes
    state: enabled
  when: not cicd_test|bool
#- name: Flush handlers
#  meta: flush_handlers

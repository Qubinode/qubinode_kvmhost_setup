---
##*****************************
## Required User Configurations
kvm_host_ipaddr: ""
kvm_host_interface: ""
kvm_host_gw: ""
kvm_host_macaddr: ""
kvm_host_netmask: ""
kvm_host_mask_prefix: ""
kvm_host_bootproto: 'dhcp'
kvm_bridge_type: 'Bridge'
admin_user: ""
kvm_host_domain: "lab.example"
kvm_host_dns_server: "1.1.1.1"
dns_servers:
  - "{{ dns_server }}"
  - "8.8.8.8"
kvm_host_libvirt_dir: /var/lib/libvirt/images

# Optional nic for storage network
storage_nic: false

# Optional dedicated disk for libvirt directory pool
libvirt_disk: false

# set to false to skip creating a bridge interface
configure_bridge: true

# Name for the bridge interface 
qubinode_bridge_name: qubibr0 

##*****************************
## Optional User Configurations
# dictionary of libvirt networks to create
libvirt_host_networks:
  - name: "{{ vm_libvirt_net | default(qubinet) }}"
    create: true
    mode: bridge
    bridge_device: "{{ kvm_host_bridge_name | default(qubinode_bridge_name) }}"
    ifcfg_type: "{{ kvm_bridge_type }}"
    ifcfg_bootproto: "{{ kvm_host_bootproto }}"
    bridge_slave_dev: "{{ kvm_host_interface }}"
    gateway: "{{ kvm_host_gw }}"
    mask_prefix: "{{ kvm_host_mask_prefix }}"
    ipaddress: "{{ kvm_host_ip }}"
    mask: "{{ kvm_host_netmask }}"
    subnet: "not currently in use"
    mac: "{{ kvm_host_macaddr }}"

# Dictionary of libvirt storage pools to create
libvirt_host_storage_pools:
  - name: default
    state: active
    autostart: yes
    path: "{{ kvm_host_libvirt_dir }}"

# Set to yes to add the admin_user to the libvirt group
# and change libvirt to be accessible user 
enable_libvirt_admin_user: no

# The actual libvirt group, users added to this group will have admin access to KVM
# when enable_libvirt_admin_user is set
kvm_host_group: libvirt

# Configure the user bash shell login prompt
# This will overwrite your existing .bashrc, .vimrc and other terminal configuration files
configure_shell: no

# users whose shell will be configured
shell_users:
  - "{{ admin_user }}"
  - root

# set to true to test in container
cicd_test: false

##***********************
## Non user configuration
qubinode_bridge_fact: "{{ ansible_qubibr0.active }}"
kvm_host_ip: "{{ kvm_host_ipaddr }}"

# The primary configuration directory
project_dir: /home/admin/project

# KVM host RHEL 8 packages
required_rpm_pakcages:
   - virt-install
   - libvirt-daemon-config-network
   - libvirt-daemon-kvm
   - libguestfs-tools
   - libvirt-client
   - qemu-kvm
   - nfs-utils
   - libvirt-daemon
   - libvirt-client
   - virt-top
   - tuned
   - openssh-server
   - wget
   - git
   - net-tools
   - bind-utils
   - yum-utils
   - iptables-services
   - bash-completion
   - kexec-tools
   - sos
   - psacct
   - vim
   - device-mapper-event-libs
   - device-mapper-libs
   - httpd-tools
   - java-1.8.0-openjdk-devel.x86_64
   - tmux
   - python3-dns
   - python3-lxml
   - cargo
   - lm_sensors
   - python3-netaddr

libvirt_services:
  - libvirtd
  - tuned

# packages for cockpit
cockpit_packages:
  - cockpit
  - cockpit-dashboard
  - cockpit-storaged
  - cockpit-packagekit
  - cockpit-machines
  - cockpit-bridge
  - subscription-manager-cockpit
  - cockpit-ws

# synth shell global directory
synth_shell_dir: /etc

##***********************
## Deprecated vars
qcow_rhel_name: rhel-8.2-x86_64-kvm.qcow2